<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-110000</depth>
  <persistent>0</persistent>
  <parentName>HUD</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeLimit=global.timeLimitMins*30*60;
timer=timeLimit;
overtime=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if timer &gt; 0
    timer -= 1 * global.delta_factor;
else if (timer &lt;= 0 and instance_exists(GeneratorRed) and instance_exists(GeneratorBlue))
{
    var redStage, blueStage;
    with (Generator)
    {
        if (hp &gt;= maxHp*0.66)
        {
            if (team == TEAM_RED) 
                redStage = 3 
            else blueStage = 3;
        }
        else if (hp &gt;= maxHp*0.33 &amp;&amp; hp &lt; maxHp*0.66)
        {
            if (team == TEAM_RED)
                redStage = 2;
            else blueStage = 2;
        }
        else
        {
            if (team == TEAM_RED)
                redStage = 1;
            else blueStage = 1;
        }
    }
    if (redStage &gt; blueStage &amp;&amp; GeneratorRed.alarm[0] &gt; -1) { overtime = true; exit; }
    if (redStage &lt; blueStage &amp;&amp; GeneratorBlue.alarm[0] &gt; -1) { overtime = true; exit; }
    if (redStage == blueStage &amp;&amp; (GeneratorRed.alarm[0] &gt; -1 || GeneratorBlue.alarm[0] &gt; -1)) { overtime = true; exit; }    
    if (redStage &gt; blueStage) global.winners = TEAM_RED;
    if (redStage &lt; blueStage) global.winners = TEAM_BLUE;
    if (redStage == blueStage) global.winners = TEAM_SPECTATOR;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>receiveCompleteMessage(global.serverSocket,5,global.deserializeBuffer);
global.timeLimitMins = fct_read_ubyte(global.deserializeBuffer);
timeLimit=global.timeLimitMins*30*60;
timer=fct_read_uint(global.deserializeBuffer);
with GeneratorBlue event_user(13);
with GeneratorRed event_user(13);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fct_write_ubyte(global.serializeBuffer, global.timeLimitMins);
fct_write_uint(global.serializeBuffer, timer);
with GeneratorBlue event_user(12);
with GeneratorRed event_user(12);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xoffset = view_xview[0];
yoffset = view_yview[0];
xsize = view_wview[0];
ysize = view_hview[0];
xshift = -320*global.timerPos;
yshift = 5*global.timerPos;

barcolor=make_color_rgb(217,217,183);
draw_set_alpha(1);

draw_sprite_ext(GeneratorHUDS,0,xoffset+xsize/2,yoffset+ysize-50,2,2,0,c_white,1);
if instance_exists(GeneratorRed) {
    draw_sprite_ext(GeneratorRedS,GeneratorRed.image_index,xoffset+xsize/2-50,yoffset+ysize-50,1,1,0,c_white,1);
    draw_sprite_ext(GeneratorShieldS,floor(GeneratorRed.shieldIndex),xoffset+xsize/2-50,yoffset+ysize-50,1,1,0,c_white, GeneratorRed.shieldResistance);
    draw_healthbar(xoffset+xsize/2-77, yoffset+ysize-75, xoffset+xsize/2-25, yoffset+ysize-68,GeneratorRed.hp*100/GeneratorRed.maxHp,c_black,barcolor,barcolor,0,true,true);
    draw_healthbar(xoffset+xsize/2-77, yoffset+ysize-30, xoffset+xsize/2-25, yoffset+ysize-23,GeneratorRed.shieldHp*100/GeneratorRed.maxShieldHp,c_black,barcolor,barcolor,0,true,true);
}
if instance_exists(GeneratorBlue) {
    draw_sprite_ext(GeneratorBlueS,GeneratorBlue.image_index,xoffset+xsize/2+50,yoffset+ysize-50,1,1,0,c_white,1);
    draw_sprite_ext(GeneratorShieldS,floor(GeneratorBlue.shieldIndex),xoffset+xsize/2+50,yoffset+ysize-50,1,1,0,c_white, GeneratorBlue.shieldResistance);
    draw_healthbar(xoffset+xsize/2+23, yoffset+ysize-75, xoffset+xsize/2+75, yoffset+ysize-68,GeneratorBlue.hp*100/GeneratorBlue.maxHp,c_black,barcolor,barcolor,0,true,true);
    draw_healthbar(xoffset+xsize/2+23, yoffset+ysize-30, xoffset+xsize/2+75, yoffset+ysize-23,GeneratorBlue.shieldHp*100/GeneratorBlue.maxShieldHp,c_black,barcolor,barcolor,0,true,true);
}

draw_roundtimer(xoffset, yoffset, xsize, ysize, timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
