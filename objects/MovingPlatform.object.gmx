<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>DropdownPlatform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
animationSpeed = 0;
trigger = 0;

top = 60;
left = 0;
upSpeed = 3;
downSpeed = 3;
movementState = 1; // 0=stopped, 1=up, 2=down

startX = x;
startY = y;
x_ = x;
y_ = y;
x = round(x_);
y = round(y_);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dx, dy, direction_, speed_;

if(movementState == 1)
{
    speed_ = upSpeed;
    direction_ = point_direction(0, 0, left, -top);
    image_index += animationSpeed * global.delta_factor;
}
else if(movementState == 2)
{
    speed_ = downSpeed;
    direction_ = point_direction(left, -top, 0, 0);
    image_index += animationSpeed * global.delta_factor;
}
else
{
    speed_ = 0;
    direction_ = 0;
    image_index = 0;
}

dx = cos(degtorad(direction_)) * speed_ * global.delta_factor;
dy = -sin(degtorad(direction_)) * speed_ * global.delta_factor;

x_ += dx;
y_ += dy;

var totalDist;
// Distance of the platform from (startX, startY) in the "topwards" direction
totalDist = point_distance(0, 0, left, -top);
if (totalDist &lt;= 0) {
    movementState = 0;
    x_ = startX;
    y_ = startY;
}
else {
    var dist;
    // (which is the vector (left, -top))
    dist = ((x_-startX)*left + (y_-startY)*(-top)) / totalDist;
    if((movementState == 2) and (dist &lt;= 0))
    {
        x_ = startX;
        y_ = startY;
        if(trigger == 0)
            movementState = 1;
        else
            movementState = 0;
    }
    else if((movementState == 1) and (dist &gt;= totalDist))
    {
        movementState = 2;
    }
}

var colldx, colldy;
colldy = round(y_) - round(y);
colldx = round(x_) - round(x);

if(colldx != 0 or colldy != 0 or (movementState == 0 and trigger &gt; 0))
{
    with(Character)
    {
        if(keyState &amp; $02) continue; // Cannot collide or move along if they hold "down"
        // This condition should allow people to be picked up by the platform as long as they don't move
        // upwards, or move upward less quickly than the platform. Note that you *need* the two part condition - just
        // checking for upward motion would let an up-moving platform pass right through someone moving up less quickly,
        // and just comparing vspeeds would prevent people from standing on the platform and being moved down by it.
        if((vspeed &lt; 0) and ((vspeed * global.delta_factor) &lt; dy)) continue; // Don't pick up characters who are just "passing through"
        if(place_meeting(x, y, other)) continue;
        if(place_meeting(x, y+1, other))
        {
            // Character is standing on this dropdown, move them accordingly unless they would get stuck
            charSetSolids();
            if(place_free(x+colldx, y+colldy))
            {
                x += colldx;
                y += colldy;
                vspeed = 0;
            }
            charUnsetSolids();
            
            if (other.movementState == 0 and (other.trigger == 1 or (other.trigger == 2 and intel)))
            {
                other.movementState = 1;
            }
        }
        else if(place_meeting(x-colldx, y-colldy, other.id))
        {
            // Not standing on the platform, but the platform runs into this character.
            // However, does it do so from the bottom?
            var oldCharX, oldCharY, charMoved;
            oldCharX = x;
            oldCharY = y;
            charMoved = false;
            other.solid = true;
            good_move_contact_solid(point_direction(x, y, x-colldx, y-colldy), point_distance(x, y, x-colldx, y-colldy));
            other.solid = false;
            if(place_meeting(x, y+1, other))
            {
                // Yes, the platform runs into the character from the bottom
                charSetSolids();
                if(place_free(x + colldx, y + colldy))
                {
                    x += colldx;
                    y += colldy;
                    vspeed = 0;
                    charMoved = true;
                }
                charUnsetSolids();
            }
            if(not charMoved)
            {
                x = oldCharX;
                y = oldCharY;
            }
        }
    }
    x = round(x_);
    y = round(y_);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.updateType == QUICK_UPDATE) or (global.updateType == FULL_UPDATE) {
    receiveCompleteMessage(global.serverSocket,5,global.deserializeBuffer);
    x_ = fct_read_ushort(global.deserializeBuffer)/5;
    y_ = fct_read_ushort(global.deserializeBuffer)/5;
    movementState = fct_read_ubyte(global.deserializeBuffer);
    x = round(x_);
    y = round(y_);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.updateType == QUICK_UPDATE or global.updateType == FULL_UPDATE) {
    fct_write_ushort(global.serializeBuffer, x_*5);
    fct_write_ushort(global.serializeBuffer, y_*5);
    fct_write_ubyte(global.serializeBuffer, movementState);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resource = readProperty(other.properties, "resource", STRING, "");
ds_list_add(other.specialEntities, id);

var scale;
scale = readProperty(other.properties, "scale", REAL, 1);
if (scale != 1)
{
    image_xscale = scale;
    image_yscale = scale;
}

animationSpeed = readProperty(other.properties, "animationspeed", REAL, animationSpeed);
trigger = readProperty(other.properties, "trigger", REAL, trigger);
if(trigger != 0)
    movementState = 0;
else
    movementState = 1;

top = readProperty(other.properties, "top", REAL, top);
left = readProperty(other.properties, "left", REAL, left);
upSpeed = readProperty(other.properties, "upspeed", REAL, upSpeed);
downSpeed = readProperty(other.properties, "downspeed", REAL, downSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
