<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    object = -1;
    team = TEAM_SPECTATOR;
    class = CLASS_SCOUT;
    socket = -1;
    name = "";
    kicked = false;
    
    // client setting stuff; set to defaults
    queueJump = false;
    
    //stat tracking array
    stats[KILLS] = 0;
    stats[DEATHS] = 0;
    stats[CAPS] = 0;
    stats[ASSISTS] = 0;
    stats[DESTRUCTION] = 0;
    stats[STABS] = 0;
    stats[HEALING] = 0;
    stats[DEFENSES] = 0;
    stats[INVULNS] = 0;
    stats[BONUS] = 0;
    stats[DOMINATIONS] = 0;
    stats[REVENGE] = 0;
    stats[POINTS] = 0;
    
    //statistic array for single life/arena
    roundStats[KILLS] = 0;
    roundStats[DEATHS] = 0;
    roundStats[CAPS] = 0;
    roundStats[ASSISTS] = 0;
    roundStats[DESTRUCTION] = 0;
    roundStats[STABS] = 0;
    roundStats[HEALING] = 0;
    roundStats[DEFENSES] = 0;
    roundStats[INVULNS] = 0;
    roundStats[BONUS] = 0;
    roundStats[DOMINATIONS] = 0;
    roundStats[REVENGE] = 0;
    roundStats[POINTS] = 0;
    
    timesChangedCapLimit = 0;
    
    lastKnownx = 0;
    lastKnowny = 0;
    
    humiliated = 0;
    
    deathmatch_respawn_bypass = 0;
    
    //Sentries for Engies
    sentry = noone;
    
    // Haxxy rewards
    rewards = ds_map_create();
    badges = ds_list_create();
    ghost = noone;
    
    //Domination Kill Table
    dominationKills = domination_kills_create();
    
    corpse = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(object != -1) with(object) instance_destroy();
    ds_map_destroy(rewards);
    ds_list_destroy(badges);
    with (ghost)
        instance_destroy();
    fct_socket_destroy(socket);

    clearPlayerDominations(id);
    domination_kills_destroy(dominationKills);
    
    with(Rocket) if(ownerPlayer == other.id) instance_destroy();
    with(BurningProjectile) if(ownerPlayer == other.id) instance_destroy();
    with(Shot) if(ownerPlayer == other.id) instance_destroy();
    with(Needle) if(ownerPlayer == other.id) instance_destroy();
    with(Sentry) if(ownerPlayer == other.id) instance_destroy();
    with(DeathCam) if(killedby == other.id) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (spawningAllowed())
    PlayerSpawn();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(global.updateType == FULL_UPDATE) {
        receiveCompleteMessage(global.serverSocket,13,global.deserializeBuffer);
        stats[KILLS] = fct_read_ubyte(global.deserializeBuffer);
        stats[DEATHS] = fct_read_ubyte(global.deserializeBuffer);
        stats[CAPS] = fct_read_ubyte(global.deserializeBuffer);
        stats[ASSISTS] = fct_read_ubyte(global.deserializeBuffer);
        stats[DESTRUCTION] = fct_read_ubyte(global.deserializeBuffer);
        stats[STABS] = fct_read_ubyte(global.deserializeBuffer);
        stats[HEALING] = fct_read_ushort(global.deserializeBuffer);
        stats[DEFENSES] = fct_read_ubyte(global.deserializeBuffer);
        stats[INVULNS] = fct_read_ubyte(global.deserializeBuffer);
        stats[BONUS] = fct_read_ubyte(global.deserializeBuffer);
        stats[POINTS] = fct_read_ubyte(global.deserializeBuffer);
        queueJump = fct_read_ubyte(global.deserializeBuffer);
        parseRewards(receivestring(global.serverSocket, 2), rewards);
        parseBadges(rewards, badges);
        
        // Deserialize the domination kill table (number of kills for each player except self)
        receiveCompleteMessage(global.serverSocket, ds_list_size(global.players)-1, global.deserializeBuffer);
        var i, victim;
        for (i = 0; i &lt; ds_list_size(global.players); i += 1)
        {
            victim = ds_list_find_value(global.players, i);
            if (victim != id)
                domination_kills_set(dominationKills, victim, fct_read_ubyte(global.deserializeBuffer));
        }
    }
 
    var charObj, subobjects;
    receiveCompleteMessage(global.serverSocket,1,global.deserializeBuffer);
    subobjects = fct_read_ubyte(global.deserializeBuffer);
    
    // If the player has a character object on the server
    if(subobjects &amp; $01 != 0) {
        if(object == -1) {
            charObj = getCharacterObject(class);
            if(charObj != -1) {
                global.paramPlayer = id;
                object = instance_create(0,0,charObj);
                global.paramPlayer = noone;
            } else {
                show_message("Invalid player object while deserializing");
            }
        }
        with(object) event_user(13);
    } else {
        if(object != -1) with(object) instance_destroy();
        object = -1;
    }   
    
    // If the player has a sentry object on the server
    if(subobjects &amp; $02)
    {
        if(!sentry)
        {
            sentry = instance_create(0,0,Sentry);
            sentry.ownerPlayer = id;
            sentry.team = team;
            sentry.startDirection = image_xscale;
            sentry.image_xscale = image_xscale;
        }
        with(sentry)
            event_user(13);
    } else {
        with(sentry)
            instance_destroy();
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var subobjects;

    if(global.updateType == FULL_UPDATE) {
        fct_write_ubyte(global.serializeBuffer, stats[KILLS]);
        fct_write_ubyte(global.serializeBuffer, stats[DEATHS]);
        fct_write_ubyte(global.serializeBuffer, stats[CAPS]);
        fct_write_ubyte(global.serializeBuffer, stats[ASSISTS]);
        fct_write_ubyte(global.serializeBuffer, stats[DESTRUCTION]);
        fct_write_ubyte(global.serializeBuffer, stats[STABS]);
        fct_write_ushort(global.serializeBuffer, stats[HEALING]);
        fct_write_ubyte(global.serializeBuffer, stats[DEFENSES]);
        fct_write_ubyte(global.serializeBuffer, stats[INVULNS]);
        fct_write_ubyte(global.serializeBuffer, stats[BONUS]);
        fct_write_ubyte(global.serializeBuffer, stats[POINTS]);
        fct_write_ubyte(global.serializeBuffer, queueJump);
        var unparsed;
        unparsed = unparseRewards(rewards);
        fct_write_ushort(global.serializeBuffer, string_length(unparsed));
        fct_write_string(global.serializeBuffer, unparsed);
        
        // Serialize the domination kill table by sending the number of kills for each
        // player except self
        var i, victim;
        for (i = 0; i &lt; ds_list_size(global.players); i += 1)
        {
            victim = ds_list_find_value(global.players, i);
            if (victim != id)
                fct_write_ubyte(global.serializeBuffer, domination_kills_get(dominationKills, victim));
        }
    } 
    
    subobjects=0;
    
    if(object != -1) subobjects |= $01;
    if(sentry) subobjects |= $02;
    
    fct_write_ubyte(global.serializeBuffer, subobjects);

    if(object != -1) with(object) event_user(12);     
    with(sentry)
        event_user(12);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
