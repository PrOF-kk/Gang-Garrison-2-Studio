<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>InvasionHUDS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-110000</depth>
  <persistent>0</persistent>
  <parentName>HUD</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeLimit=global.timeLimitMins*30*60;
timer=timeLimit;
overtime = 0;
global.setupTimer=1800;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.run_virtual_ticks)
{
    if (global.setupTimer &gt; 0)
        global.setupTimer -= 1;
    if (global.setupTimer == 90 or global.setupTimer == 120
        or global.setupTimer == 150 or global.setupTimer == 180)
        sound_play(CountDown1Snd);
    else if (global.setupTimer == 60)
        sound_play(CountDown2Snd);
    else if (global.setupTimer == 30)
    {
        timer = timeLimit;
        sound_play(SirenSnd);
    }
}

var redIsCapping;

if (!instance_exists(IntelligenceBlue))
    redIsCapping = true;
else if (IntelligenceBlue.alarm[0] &gt; 0)
    redIsCapping = true;
else
    redIsCapping = false;

if (timer &gt; 0)
    timer -= 1 * global.delta_factor;

if (global.redCaps &gt;= global.caplimit)
    global.winners = TEAM_RED;
else if(timer &lt;= 0 and (!redIsCapping or global.redCaps+1 &lt; global.caplimit))
    global.winners = TEAM_BLUE;

if (timer &lt;= 0 and global.winners == -1)
    overtime = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>receiveCompleteMessage(global.serverSocket,7,global.deserializeBuffer);
global.timeLimitMins = fct_read_ubyte(global.deserializeBuffer);
timeLimit=global.timeLimitMins*30*60;
timer=fct_read_uint(global.deserializeBuffer);
global.setupTimer=fct_read_ushort(global.deserializeBuffer);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fct_write_ubyte(global.serializeBuffer, global.timeLimitMins);
fct_write_uint(global.serializeBuffer, timer);
fct_write_ushort(global.serializeBuffer, global.setupTimer);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    xoffset = view_xview[0];
    yoffset = view_yview[0];
    xsize = view_wview[0];
    ysize = view_hview[0];
    xshift = -320*global.timerPos;
    yshift = 5*global.timerPos;
    var bluedir;

    if (global.myself == -1)
        exit;
    
    draw_set_alpha(1);
    
    draw_sprite_ext(sprite_index, 0, xoffset+xsize/2, yoffset+ysize, 3, 3, 0, c_white, 1);

    draw_set_color(c_black);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);

    //showing the amount of caps, and the amount of caps to win
    draw_text_transformed(xoffset+xsize/2-64, yoffset+ysize-30, string(global.redCaps),2,2,0);
    
    caplimitxoffset = 54;
    // this next piece of code helps to resize the value of the numbers depending on the limit as not to overflow
    if (global.caplimit &lt;= 9)
    {
        draw_text_transformed(xoffset+xsize/2-2+caplimitxoffset, yoffset+ysize-15, string(global.caplimit),2,2,0);
    }
    else
    {
        if (global.caplimit &gt; 999)
        {
            draw_sprite_ext(infinity,0,xoffset+xsize/2-3+caplimitxoffset, yoffset+ysize-17, 2, 2, 0, c_white, 1);
        }
        else
        {
            draw_text(xoffset+xsize/2-2, yoffset+ysize-15+caplimitxoffset, string(global.caplimit));   
        }
    }
    
    //Drawing intel status and arrows:
    
    bluex=(xoffset+xsize/2)-1;
    bluey=(yoffset+ysize)-51;
    
    // Point to the intel if it's on the field
    if (instance_exists(IntelligenceBlue))
    {
        bluedir = point_direction(view_xview + view_wview/2, view_yview + view_hview/2, IntelligenceBlue.x, IntelligenceBlue.y);
        if (IntelligenceBlue.alarm[0] &lt;= 0)
            blueintelstatus=2;
        else
            blueintelstatus=0;
    }
    // Someone's carrying it
    else
    {
        // If we're carrying it, it should point where we need to go
        bluedir = point_direction(view_xview + view_wview/2, view_yview + view_hview/2, IntelligenceBaseRed.x, IntelligenceBaseRed.y);
        with(Character)
        {
            // Otherwise it whould point at the person who's carrying it
            if (team == TEAM_RED and intel and id != global.myself.object)
                bluedir = point_direction(view_xview + view_wview/2, view_yview + view_hview/2, x, y);
        }
        blueintelstatus=1;
    }
    
    if (global.myself.object != -1)
    {
        if (global.myself.team == TEAM_RED and global.myself.object.intel)
            blueintelstatus = 3;
    }
    
    if (blueintelstatus == 0)
        draw_sprite_ext(IntelReturnTimeS,max(1,floor(IntelligenceBlue.alarm[0]/900*17*global.delta_factor)),bluex-26,bluey-27,3,3,0,c_white,1);
    else
        draw_sprite_ext(IntelReturnTimeS,16,bluex-26,bluey-27,3,3,0,c_white,1);
    
    draw_sprite_ext(IntelArrowS, 1, bluex, bluey, 3, 3, bluedir, c_white, 1);
    
    draw_sprite_ext(IntelStatusS, blueintelstatus, bluex, bluey, 2, 2, 0, c_white, 1);
    
    draw_roundtimer(xoffset, yoffset, xsize, ysize, timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
