<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SentryRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>SentryMaskS</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
vspeed = .001;
oldVspeed = .001;
maxHp = 100;
hp = 25;
weapons[0]=SentryTurret;
currentWeapon=-1;
built=0;
kills=0;
ubered=0;
image_speed = 0;
landed=0;
humiliated = 0;
buildrate = 1.2;

// For self-knockback when destroyed
blastRadius = 65;
knockback = 4;
       
lastDamageDealer = noone;
lastDamageSource = -1;

idleTimer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (built==1)
{
    with(currentWeapon)
        instance_destroy();
}
if (global.myself == ownerPlayer)
{
    if !instance_exists(NoticeO) instance_create(0,0,NoticeO);
    with NoticeO notice = NOTICE_AUTOGUNSCRAPPED;
}

// Allow the mines stickied to this autogun to drop to the floor
with(Mine)
{
    if(place_meeting(x,y,other.id))
        stickied = false;
}

// Knock back our owner
with(ownerPlayer.object)
{
    if (distance_to_object(other) &lt; other.blastRadius
        and !place_meeting(x, y+1, Obstacle))
    {
        var rdir, vectorfactor;
        rdir = point_direction(other.x, other.y, x+(left_bound_offset+right_bound_offset)/2, y+(top_bound_offset+bottom_bound_offset)/2);
        vectorfactor = point_distance(0, 0, power(sin(degtorad(rdir)), 2), power(cos(degtorad(rdir)), 2));
        if (1 - distance_to_object(other)/other.blastRadius &lt;= 0.25)
            continue;
        motion_add(rdir, min(15, other.knockback-other.knockback*(distance_to_object(other)/other.blastRadius)) * vectorfactor);
    } 
}

ownerPlayer.sentry = noone;
var explosion;
explosion = instance_create(x,y,Explosion);
explosion.sprite_index = ExplosionSmallS;
playsound(x,y,ExplosionSnd);
sentrygibs=instance_create(x,y,SentryGibs);
sentrygibs.image_speed = 0;
if (team == TEAM_RED)
    sentrygibs.image_index = 0;
else
    sentrygibs.image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>idleTimer = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(1);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.isHost and hp&lt;=0)
{
    var healer;
    healer = noone;
    with(lastDamageDealer)
        if (object)
            if (object.healer)
                healer = object.healer;
    sendEventDestruction(ownerPlayer, lastDamageDealer, healer, lastDamageSource);
    doEventDestruction(ownerPlayer, lastDamageDealer, healer, lastDamageSource);
    exit;
}
if(hp&gt;maxHp) hp=maxHp;

if (built == 1) {
    if (idleTimer == true) {
        playsound(x,y,SentryIdle);
        alarm[5] = 90 / global.delta_factor;    
    }    
    idleTimer = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.isHost and (ownerPlayer.class != CLASS_ENGINEER or team != ownerPlayer.team or collision_circle(x,y+10,25,Sentry,false,true)&gt;=0))
{
    sendEventDestruction(ownerPlayer, noone, noone, 0);
    doEventDestruction(ownerPlayer, noone, noone, 0);
    exit;
}

if (built == 0 and vspeed == 0)
{
    if (hp &lt; maxHp)
        hp += buildrate * global.delta_factor;
    else
        built = 1;
    buildrate = min(buildrate, buildrate+(0.6*global.delta_factor/45)); // Buildrate increases from 0.5 to 1 over 1.5 seconds
    image_index = floor(hp/maxHp*10);
    if (landed == 0)
    {
        landed = 1;
        playsound(x,y,SentryFloorSnd);
        playsound(x,y,SentryBuildSnd);
    }  
}

if (built == 1 and currentWeapon == -1)
{
    image_index=11;
    image_speed=0;
    hp=maxHp;
    currentWeapon = instance_create(x,y,weapons[0]);
    currentWeapon.ownerPlayer=ownerPlayer;
    currentWeapon.team=team;
    currentWeapon.startDirection=startDirection;
    with(currentWeapon)
        event_user(0);
}
if (humiliated == 1 and built == 1 and currentWeapon != -1)
    event_user(1);
    
wallSetSolid();

// Try to get outside of the wallmask if we're in it.
if(!place_free(x, y))
    move_outside_solid(0, 6);
if(!place_free(x, y))
    move_outside_solid(180, 12);
if(!place_free(x, y))
{
    move_outside_solid(0, 6);
    move_outside_solid(90, 100);
}

if(place_free(x+hspeed, y+vspeed+0.6))
    vspeed += 0.6  * global.delta_factor;
if(!place_free(x+hspeed, y+vspeed) and place_free(x, y))
    event_user(2);

if(vspeed &gt; 10)
    vspeed = 10;

wallUnsetSolid();

if(oldVspeed != 0 and vspeed == 0 and global.isHost)
{
    fct_write_ubyte(global.sendBuffer, SENTRY_POSITION);
    fct_write_ubyte(global.sendBuffer, ds_list_find_index(global.players, ownerPlayer));
    fct_write_ushort(global.sendBuffer, round(x*5));
    fct_write_ushort(global.sendBuffer, round(y*5));
}

oldVspeed = vspeed;

x += hspeed * global.delta_factor;
y += vspeed * global.delta_factor;
x -= hspeed;
y -= vspeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="IntelGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 999;
lastDamageDealer = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="TeamGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 999;
lastDamageDealer = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="FragBox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 999;
lastDamageDealer = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="KillBox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 999;
lastDamageDealer = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.updateType == FULL_UPDATE) {
    receiveCompleteMessage(global.serverSocket, 5, global.deserializeBuffer);
    startDirection = fct_read_byte(global.deserializeBuffer);
    x = fct_read_ushort(global.deserializeBuffer)/5;
    y = fct_read_ushort(global.deserializeBuffer)/5;
    xprevious = x;
    yprevious = y;
}
if(global.updateType == QUICK_UPDATE or global.updateType == FULL_UPDATE) {
    receiveCompleteMessage(global.serverSocket, 1, global.deserializeBuffer);
    var tbyte;
    tbyte = fct_read_ubyte(global.deserializeBuffer);
    built = (tbyte &amp; $80) != false;
    hp = tbyte &amp; $7F;
    if(global.updateType == FULL_UPDATE and !built)
    {
        receiveCompleteMessage(global.serverSocket, 1, global.deserializeBuffer);
        vspeed = fct_read_ubyte(global.deserializeBuffer);
    }
    if(built)
    {
        vspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.updateType == FULL_UPDATE) {
    fct_write_byte(global.serializeBuffer, startDirection);
    fct_write_ushort(global.serializeBuffer, round(x*5));
    fct_write_ushort(global.serializeBuffer, round(y*5));
}
if(global.updateType == QUICK_UPDATE or global.updateType == FULL_UPDATE) {
    fct_write_ubyte(global.serializeBuffer, (built != false)*$80 + min(127,hp));
}
if(!built and global.updateType == FULL_UPDATE)
    fct_write_ubyte(global.serializeBuffer, vspeed);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    wallSetSolid();
    really_move_contact_solid(direction, speed);
    if(!place_free(x, y+1))
        vspeed = 0;
    wallUnsetSolid();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if built==1 {
        with (currentWeapon) instance_destroy();
        image_index = 9;
        image_speed = 0;
        idleTimer = false;
    }
    humiliated = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(vspeed &gt; 0)
{
    var chuteIndex;
    chuteIndex = ceil(vspeed/10*3)-1;
    image_index = chuteIndex + (team==TEAM_BLUE)*3;
    sprite_index = ParachuteSentry;
}
else
{
    if (team == TEAM_BLUE)
        sprite_index = SentryBlue;
    if (team == TEAM_RED)
        sprite_index = SentryRed;
}
xr = round(x);
yr = round(y);
if global.myself.team == team draw_healthbar(xr-10, yr-30, xr+10, yr-25,hp*100/maxHp,c_black,c_red,c_green,0,true,true);
if (built &amp;&amp; hp &lt; .75 * maxHp) draw_sprite_part_ext(FlameS, random(4), 0, 0, 21, 9, xr-21/2, yr-15, 1, 1, c_white, 1 - (hp / maxHp));
draw_sprite_ext(sprite_index,image_index,xr,yr,image_xscale,image_yscale,image_angle,c_white,1);

if(distance_to_point(mouse_x, mouse_y)&lt;25 &amp;&amp; global.myself.team == team) {
    draw_set_alpha(1);   
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom); 
    if(team==TEAM_RED) {
        draw_set_color(c_red);
    } else {
        draw_set_color(c_blue);
    }
    draw_text(xr, yr-45, sanitiseNewlines(ownerPlayer.name) + "'s");
    draw_text(xr, yr-35, "Autogun");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
