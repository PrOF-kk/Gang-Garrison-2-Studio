<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>CTFHUDS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-110000</depth>
  <persistent>0</persistent>
  <parentName>HUD</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeLimit=global.timeLimitMins*30*60;
timer=timeLimit;
overtime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var redIsCapping, blueIsCapping;

redIsCapping = !instance_exists(IntelligenceBlue);
blueIsCapping = !instance_exists(IntelligenceRed);
if (!redIsCapping)
    redIsCapping = (IntelligenceBlue.x != IntelligenceBaseBlue.x or IntelligenceBlue.y != IntelligenceBaseBlue.y);
if (!blueIsCapping)
    blueIsCapping = (IntelligenceRed.x != IntelligenceBaseRed.x or IntelligenceRed.y != IntelligenceBaseRed.y);

if (timer &gt; 0)
    timer -= 1 * global.delta_factor;
if ((global.redCaps &gt;= global.caplimit) or (global.blueCaps &gt;= global.caplimit) or timer&lt;=0) {
    if (global.redCaps &gt; global.blueCaps)
        global.winners = TEAM_RED;
    else if (global.blueCaps &gt; global.redCaps)
        global.winners = TEAM_BLUE;
    else if (!redIsCapping and !blueIsCapping and global.blueCaps == global.redCaps)
        global.winners = TEAM_SPECTATOR;
}
    
if (timer &lt;= 0 and global.winners == -1)
    overtime = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>receiveCompleteMessage(global.serverSocket,5,global.deserializeBuffer);
global.timeLimitMins = fct_read_ubyte(global.deserializeBuffer);
timeLimit=global.timeLimitMins*30*60;
timer=fct_read_uint(global.deserializeBuffer);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fct_write_ubyte(global.serializeBuffer, global.timeLimitMins);
fct_write_uint(global.serializeBuffer, timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    xoffset = view_xview[0];
    yoffset = view_yview[0];
    xsize = view_wview[0];
    ysize = view_hview[0];
    xshift = -320*global.timerPos;
    yshift = 5*global.timerPos;
    var reddir, bluedir, redx, redy, bluex, bluey;
    
    if (global.myself == -1)
        exit;
    
    //Drawing intel status and arrows:
    
    redx = xoffset+xsize/2-65;
    redy = yoffset+ysize-50;
    bluex = xoffset+xsize/2+60;
    bluey = yoffset+ysize-50;
    
    draw_set_alpha(1);
    
    draw_sprite_ext(sprite_index, 0, xoffset+xsize/2+1, yoffset+ysize+100, 3, 3, 0, c_white, 1);

    draw_set_color(c_black);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);

    //showing the amount of caps, and the amount of caps to win
    draw_text_transformed(xoffset+xsize/2-135, yoffset+ysize-30, string(global.redCaps),2,2,0);
    draw_text_transformed(xoffset+xsize/2+130, yoffset+ysize-30, string(global.blueCaps),2,2,0);
    // this next piece of code helps to resize the value of the numbers depending on the limit as not to overflow
    if (global.caplimit &lt;= 9)
    {
        draw_text_transformed(xoffset+xsize/2-2, yoffset+ysize-15, string(global.caplimit),2,2,0);
    }
    else
    {
        if (global.caplimit &gt; 999)
        {
            draw_sprite_ext(infinity,0,xoffset+xsize/2-3, yoffset+ysize-17, 2, 2, 0, c_white, 1);
        }
        else
        {
            draw_text(xoffset+xsize/2-2, yoffset+ysize-15, string(global.caplimit));   
        }
    }
      
    
    // Point to the intel if it's on the field
    if (instance_exists(IntelligenceRed))
    {
        reddir = point_direction(redx, redy, IntelligenceRed.x, IntelligenceRed.y);
        if (IntelligenceRed.alarm[0] &lt;= 0)
            redintelstatus = 2;
        else
            redintelstatus = 0;
    }
    // Someone's carrying it
    else
    {
        // If we're carrying it, it should point where we need to go
        reddir = point_direction(redx, redy, IntelligenceBaseBlue.x, IntelligenceBaseBlue.y);
        with(Character)
        {
            // Otherwise it whould point at the person who's carrying it
            if (team == TEAM_BLUE and intel and id != global.myself.object)
                reddir = point_direction(redx, redy, x, y);
        }
        redintelstatus=1;
    }
     
    if (instance_exists(IntelligenceBlue))
    {
        bluedir = point_direction(bluex, bluey, IntelligenceBlue.x, IntelligenceBlue.y);
        if (IntelligenceBlue.alarm[0] &lt;= 0)
            blueintelstatus = 2;
        else
            blueintelstatus = 0;
    }
    else
    {
        bluedir = point_direction(bluex, bluey, IntelligenceBaseRed.x, IntelligenceBaseRed.y);
        with(Character)
        {
            if (team == TEAM_RED and intel and id != global.myself.object)
                bluedir = point_direction(bluex, bluey, x, y);
        }
        blueintelstatus=1;
    }
    
    if (global.myself.object != -1) if(global.myself.object.intel)
    {
        if(global.myself.team == TEAM_BLUE)
            redintelstatus = 3;
        if(global.myself.team == TEAM_RED)
            blueintelstatus = 3;
    }
    
    if (blueintelstatus == 0)
        draw_sprite_ext(IntelReturnTimeS,max(1,floor(IntelligenceBlue.alarm[0]/900*17*global.delta_factor)),bluex-26,bluey-27,3,3,0,c_white,1);
    else
        draw_sprite_ext(IntelReturnTimeS,16,bluex-26,bluey-27,3,3,0,c_white,1);
    
    if (redintelstatus == 0)
        draw_sprite_ext(IntelReturnTimeS,max(18,floor(IntelligenceRed.alarm[0]/900*17*global.delta_factor)+17),redx-27,redy-27,3,3,0,c_white,1);
    else
        draw_sprite_ext(IntelReturnTimeS,33,redx-27,redy-27,3,3,0,c_white,1);
    
    draw_sprite_ext(IntelArrowS, 0, redx, redy, 3, 3, reddir, c_white, 1);
    draw_sprite_ext(IntelArrowS, 1, bluex, bluey, 3, 3, bluedir, c_white, 1);
    
    draw_sprite_ext(IntelStatusS, redintelstatus, redx, redy, 2, 2, 0, c_white, 1);
    draw_sprite_ext(IntelStatusS, blueintelstatus, bluex, bluey, 2, 2, 0, c_white, 1);
    
    draw_roundtimer(xoffset, yoffset, xsize, ysize, timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
